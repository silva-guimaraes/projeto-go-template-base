services:

  db:
    # Nosso garotão. Dá de 10 a 0 em cima do MySQL.
    image: postgres
    healthcheck:
      # Serve de condicional logo após a inicialização do DBMS
      # para o docker compose saiba que o banco padrão foi criado com sucesso
      # antes de tentar rodar o nosso aplicativo.
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    restart: always
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_DB: ${PG_DB}
    ports:
      - 5432:5432

  # Interface web para monitoramento e consultas no banco.
  adminer:
    image: adminer
    restart: always
    ports:
      - 8090:8080
    depends_on:
      - db

  # Servidor
  app:
    build: .
    environment:
      # Não tive sorte em conectar com o banco usando "localhost", "127.0.0.1", ou "0.0.0.0" porque
      # o modo como o docker trata endereçamento de redes é bem diferente.
      # Felizmente o docker compose registra cada serviço como um endereço de rede então é isso
      # que o contêiner usa para conectar com o banco.
      PG_ADDR: db
    depends_on:
      db:
        # Documentado em healthcheck em db.
        condition: service_healthy
        restart: true
    ports:
      - 8888:8888
